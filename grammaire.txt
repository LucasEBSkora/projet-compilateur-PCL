<fichier>    ::= with Ada.Text_IO; use Ada.Text_IO ;
              procedure <ident> is <decl>*
              begin <instr>+ end <ident>? ; EOF
<decl>       ::= type <ident> <_type>;
              | <ident>+, : <type> (:= <expr>)? ; 
              | procedure <ident> <params>? is <decl>*
                begin <instr>+ end <ident>?;
              | function <ident> <params>? return <type> is <decl>*
                begin <instr>+ end <ident>?;

<_type>      ::= ε 
              | is <access_ou_record>
              
<access_ou_record> ::= access <ident> 
                    | record <champs>+ end record 
<champs>     ::= <ident>+, : <type>; 
<type>       ::= <ident>
              | access <ident>
<params>     ::= (<param>+;)
<param>      ::= <ident>+, : <mode>? <type>
<mode>       ::= in <_mode>
<_mode>      ::= ε | out


<instr>      ::= <accès> := <expr>;
              | <appel> ;
              | return <expr>? ;
              | begin <instr>+ end;
              | if <expr> then <instr>+ (elsif <expr> then <instr>+)*
                (else <instr>+)? end if ;
              | for <ident> in reverse? <expr> .. <expr>
                loop <instr>+ end loop ;
              | while <expr> loop <instr>+ end loop ;

<expr> ::= <and> (or <_else> <expr>)?
<_else> ::= ε
            | else
<and> ::= <not> ((and <_then>) <and>)?
<_then> ::= ε
            | then
<not> ::= not <not>
      |  <egal>
<egal> ::= <comparaison> (( = | \=) <comparaison>)?
<comparaison> ::= <addition> (( > |  >= | < | <=) <addition>)?
<addition> ::= <multiplication> ((+ | -) <addition>)?
<multiplication> ::= <negation> ((* | \ | rem) <multiplication>)?
<negation> ::= - <negation>
            |  <accès>
<accès>      ::= <primaire> <_accès>
<_accès>     ::=  ε
              | . <ident>
<primaire>       ::= <literal>
                  | ( <expr> )
                  | new <ident>
                  | character'val(<expr>)
                  | <appel>

<literal> ::= <entier> | <caractere> | true | false | null

<appel> ::= <ident> <_appel>

<_appel> ::= ε
            | ( <expr>+, )
